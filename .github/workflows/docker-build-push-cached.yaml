# Reusable workflow for building and pushing server app image.

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
        description: Repository to use for docker image.
      hash_files_template:
        required: true
        type: string
        description: String to match files against, to be hashed and used in cache key. E.g. "**/package-lock.json"
      context:
        required: true
        type: string
        description: The context to use when bulding docker image.
      file:
        required: true
        type: string
        description: File path to dockerfile to build.
      target:
        required: true
        type: string
        description: Image target to build.
      build_args:
        required: false
        type: string
        description: Newline delimited string with build args to pass to docker build.
      push:
        required: false
        type: boolean
        description: Whether to push image to registry.
        default: false
      tags:
        required: false
        type: string
        description: Newline delimited string with tags to use for docker image.
      upload_artefact:
        required: false
        type: boolean
        description: Whether to upload image as local artefact. For use between jobs. Will be made available as $repository-$hashFiles(hash_files_template)-$github.sha-$target, with retention of one day.
    secrets:
      REGISTRY_SERVER_URLS:
        required: false
        description: Server URLs of docker image repository, as newline delimited string. Required if pushing to registry.
      REGISTRY_USERNAMES:
        required: false
        description: Usernames to login onto docker image repository, as newline delimited string. Required if pushing to registry.
      REGISTRY_PASSWORDS:
        required: false
        description: Passwords to login onto docker image repository, as newline delimited string. Required if pushing to registry.
    outputs:
      artefact_name:
        description: Name of artefact, if uploaded.
        value: ${{ jobs.build-push-cache.outputs.artefact_name }}
jobs:
  build-push-cache:
    runs-on: ubuntu-latest
    outputs:
      artefact_name: ${{ steps.set_outputs.outputs.artefact_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ inputs.repository }}-${{ hashFiles(inputs.hash_files_template) }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ inputs.repository }}-${{ hashFiles(inputs.hash_files_template) }}
            ${{ runner.os }}-buildx-${{ inputs.repository }}

      - name: Parse image names
        id: parse_image_names
        shell: bash
        if: inputs.push
        env:
          REGISTRIES: ${{secrets.REGISTRY_SERVER_URLS}}
          REPOSITORY: ${{ inputs.repository }}
        run: |
          IFS=$'\n'
          registries=(${REGISTRIES})

          images=""

          for i in "${!registries[@]}"; do
            images+="${registries[i]}/${REPOSITORY}\n"
          done

          echo "::set-output name=images::$images"

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        if: inputs.push
        with:
          images: ${{ steps.parse_image_names.outputs.images }}
          tags: ${{ inputs.tags }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Login docker
        if: inputs.push
        shell: bash
        env:
          REGISTRIES: ${{secrets.REGISTRY_SERVER_URLS}}
          USERNAMES: ${{secrets.REGISTRY_USERNAMES}}
          PASSWORDS: ${{secrets.REGISTRY_PASSWORDS}}
        run: |
          IFS=$'\n'
          registries=(${REGISTRIES})
          usernames=(${USERNAMES})
          passwords=(${PASSWORDS})
          for i in "${!registries[@]}"; do
            echo "${password[i]}" | docker login "${registries[i]}" -u "${usernames[i]}" --password-stdin
          done

      #  - uses: docker/login-action@v1
      #   if: inputs.push == true
      #  with:
      #   registry: ${{ secrets.REGISTRY_SERVER_URLS }}
      #  username: ${{ secrets.REGISTRY_USERNAMES }}
      # password: ${{ secrets.REGISTRY_PASSWORDS }}

      ### Build (and potentially push) image ###

      - name: Build and Push image
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          builder: ${{ steps.buildx.outputs.name }}
          build-args: ${{ inputs.build_args }}
          target: ${{ inputs.target }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          outputs: ${{ inputs.upload_artefact && format('type=docker,dest=/tmp/{0}', inputs.repository) || null}}

      - name: Upload artifact
        if: inputs.upload_artefact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.repository }}-${{ hashFiles(inputs.hash_files_template) }}-${{ github.sha }}-${{ inputs.target }}
          path: /tmp/${{ inputs.repository }}
          retention-days: 1

      # Currently, cache entries are not removed using local cache: https://github.com/docker/build-push-action/issues/252
      # Clean and move in new cache, in order to keep cache size small (avoid build crashing because of exceeding max docker cache size)
      # Can later on opt for github actions (https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#github-cache)
      #   but it is currently experimental.
      - name: Move buildx cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Set outputs
        id: set_outputs
        if: inputs.upload_artefact
        run: |
          echo "::set-output name=artefact_name::${{ inputs.repository }}-${{ hashFiles(inputs.hash_files_template) }}-${{ github.sha }}-${{ inputs.target }}"
